syntax = "proto3";

package thought.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// Thought represents a single cognitive unit - could be a memory, idea, or observation
message Thought {
  // Unique identifier for the thought
  string id = 1;

  // The entity ID ("human", "AI", uuid(), etc.) that generated this thought
  string thinker_id = 2;

  // When this thought occurred
  google.protobuf.Timestamp timestamp = 3;

  // The actual content of the thought
  string content = 4;

  // The perceived importance or salience (0-1)
  float salience = 5;

  // How confident we are in this thought (0-1)
  float confidence = 6;

  // The type of thought this represents
  ThoughtType type = 7;

  // Emotional valence associated with this thought
  EmotionalContext emotional_context = 8;

  // Other thoughts that this thought references or builds upon
  repeated string related_thought_ids = 9;

  // Tags/categories for organizing thoughts
  repeated string tags = 10;

  // The context in which this thought occurred
  Context context = 11;

  // How long this thought persisted
  google.protobuf.Duration duration = 12;

  // Whether this is an original thought or derived from others
  bool is_original = 13;

  // The source of this thought if not original
  Source source = 14;

  // The modality of the thought (visual, verbal, etc)
  repeated Modality modalities = 15;

  // Metadata about modifications to this thought
  ThoughtMetadata metadata = 16;
}

// Different types of thoughts
enum ThoughtType {
  THOUGHT_TYPE_UNSPECIFIED = 0;
  THOUGHT_TYPE_MEMORY = 1;           // Recalled information
  THOUGHT_TYPE_OBSERVATION = 2;      // Direct sensory input
  THOUGHT_TYPE_INFERENCE = 3;        // Logical deduction
  THOUGHT_TYPE_QUESTION = 4;         // Query or uncertainty
  THOUGHT_TYPE_DECISION = 5;         // Choice or judgment
  THOUGHT_TYPE_EMOTION = 6;          // Feeling or affect
  THOUGHT_TYPE_INTENTION = 7;        // Plan or goal
  THOUGHT_TYPE_IMAGINATION = 8;      // Creative or hypothetical
  THOUGHT_TYPE_METACOGNITION = 9;    // Thinking about thinking
}

// Emotional context of a thought
message EmotionalContext {
  // Primary emotion (joy, sadness, etc)
  string primary_emotion = 1;

  // Intensity of the emotion (0-1)
  float intensity = 2;

  // Secondary emotions
  repeated string secondary_emotions = 3;

  // Valence (-1 to 1, negative to positive)
  float valence = 4;

  // Arousal level (0-1, calm to excited)
  float arousal = 5;
}

// Context in which the thought occurred
message Context {
  // Physical location
  Location location = 1;

  // Current activity
  string activity = 2;

  // Social context
  repeated string present_entities = 3;

  // Environmental factors
  map<string, string> environmental_factors = 4;

  // Internal state
  InternalState internal_state = 5;
}

// Location information
message Location {
  // Geographic coordinates
  double latitude = 1;
  double longitude = 2;

  // Semantic location (e.g., "home", "office")
  string semantic_location = 3;

  // More specific location context
  repeated string location_hierarchy = 4;
}

// Internal state when thought occurred
message InternalState {
  // Energy level (0-1)
  float energy_level = 1;

  // Stress level (0-1)
  float stress_level = 2;

  // Focus level (0-1)
  float focus_level = 3;

  // Other physiological metrics
  map<string, float> physiological_metrics = 4;
}

// Source of non-original thoughts
message Source {
  // Type of source
  SourceType type = 1;

  // Identifier of the source
  string source_id = 2;

  // When this was learned/acquired
  google.protobuf.Timestamp acquisition_time = 3;

  // Reliability of the source (0-1)
  float reliability = 4;
}

// Types of thought sources
enum SourceType {
  SOURCE_TYPE_UNSPECIFIED = 0;
  SOURCE_TYPE_OBSERVATION = 1;
  SOURCE_TYPE_COMMUNICATION = 2;
  SOURCE_TYPE_READING = 3;
  SOURCE_TYPE_INFERENCE = 4;
  SOURCE_TYPE_MEMORY = 5;
}

// Modality of the thought
enum Modality {
  MODALITY_UNSPECIFIED = 0;
  MODALITY_VERBAL = 1;
  MODALITY_VISUAL = 2;
  MODALITY_AUDITORY = 3;
  MODALITY_KINESTHETIC = 4;
  MODALITY_OLFACTORY = 5;
  MODALITY_GUSTATORY = 6;
  MODALITY_ABSTRACT = 7;
}

// Metadata about thought modifications
message ThoughtMetadata {
  // When this thought was first created
  google.protobuf.Timestamp creation_time = 1;

  // Last modification time
  google.protobuf.Timestamp last_modified = 2;

  // List of timestamps when this thought was accessed
  repeated google.protobuf.Timestamp access_timestamps = 3;

  // Number of times recalled/accessed (computed from access_timestamps)
  int32 access_count = 4;

  // How this thought has changed over time
  repeated ThoughtRevision revisions = 5;

  // Additional arbitrary metadata
  map<string, string> attributes = 6;
}

// Revision history for thoughts
message ThoughtRevision {
  // When this revision occurred
  google.protobuf.Timestamp timestamp = 1;

  // What changed
  string change_description = 2;

  // Why it changed
  string change_reason = 3;

  // Previous content
  string previous_content = 4;
}

// Service definition for managing thoughts
service ThoughtService {
  // Record a new thought
  rpc RecordThought(RecordThoughtRequest) returns (RecordThoughtResponse);

  // Retrieve thoughts based on criteria
  rpc QueryThoughts(QueryThoughtsRequest) returns (QueryThoughtsResponse);

  // Update an existing thought
  rpc UpdateThought(UpdateThoughtRequest) returns (UpdateThoughtResponse);

  // Delete a thought
  rpc DeleteThought(DeleteThoughtRequest) returns (DeleteThoughtResponse);

  // Stream thoughts as they occur
  rpc StreamThoughts(StreamThoughtsRequest) returns (stream StreamThoughtsResponse);
}

// Request/response messages for service methods
message RecordThoughtRequest {
  Thought thought = 1;
}

message RecordThoughtResponse {
  string thought_id = 1;
}

message QueryThoughtsRequest {
  // Time range
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;

  // Filter criteria
  repeated string tags = 3;
  repeated ThoughtType types = 4;
  float min_salience = 5;

  // Pagination
  int32 page_size = 6;
  string page_token = 7;
}

message QueryThoughtsResponse {
  repeated Thought thoughts = 1;
  string next_page_token = 2;
}

message UpdateThoughtRequest {
  string thought_id = 1;
  Thought updated_thought = 2;
}

message UpdateThoughtResponse {
  Thought thought = 1;
}

message DeleteThoughtRequest {
  string thought_id = 1;
}

message DeleteThoughtResponse {
  bool success = 1;
}

message StreamThoughtsRequest {
  string thinker_id = 1;
  repeated ThoughtType types = 2;
  float min_salience = 3;
}

message StreamThoughtsResponse {
  repeated ThoughtType types = 1;
  float min_salience = 2;
}
